/*
Deployment script for TournamentsDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TournamentsDB"
:setvar DefaultFilePrefix "TournamentsDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[MatchupEntries]...';


GO
CREATE TABLE [dbo].[MatchupEntries] (
    [Id]              INT NOT NULL,
    [MatchupId]       INT NULL,
    [ParentMatchupId] INT NULL,
    [CompetingTeamId] INT NULL,
    [Score]           INT NULL,
    CONSTRAINT [PK_MatchupEntries] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Matchups]...';


GO
CREATE TABLE [dbo].[Matchups] (
    [Id]           INT        NOT NULL,
    [WinnerTeamId] NCHAR (10) NULL,
    [MatchupRound] NCHAR (10) NULL,
    CONSTRAINT [PK_Matchups] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Players]...';


GO
CREATE TABLE [dbo].[Players] (
    [Id]              INT           NOT NULL,
    [FirstName]       NVARCHAR (50) NULL,
    [LastName]        NVARCHAR (50) NULL,
    [EmailAdress]     NVARCHAR (50) NULL,
    [CellphoneNumber] NVARCHAR (50) NULL,
    CONSTRAINT [PK_Players] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Prizes]...';


GO
CREATE TABLE [dbo].[Prizes] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [PlaceNumber]     INT           NOT NULL,
    [PlaceName]       NVARCHAR (50) NOT NULL,
    [PrizeAmount]     MONEY         NOT NULL,
    [PrizePercentage] FLOAT (53)    NOT NULL,
    CONSTRAINT [PK_Prizes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TeamMembers]...';


GO
CREATE TABLE [dbo].[TeamMembers] (
    [Id]       INT NOT NULL,
    [TeamId]   INT NULL,
    [PlayerId] INT NULL,
    CONSTRAINT [PK_TeamMembers] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Teams]...';


GO
CREATE TABLE [dbo].[Teams] (
    [Id]       INT           NOT NULL,
    [TeamName] NVARCHAR (50) NULL,
    CONSTRAINT [PK_Teams] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TournamentEntries]...';


GO
CREATE TABLE [dbo].[TournamentEntries] (
    [Id]           INT NOT NULL,
    [TournamentId] INT NOT NULL,
    [TeamId]       INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TournamentPrizes]...';


GO
CREATE TABLE [dbo].[TournamentPrizes] (
    [Id]           INT NOT NULL,
    [TournamentId] INT NULL,
    [PrizeId]      INT NULL,
    CONSTRAINT [PK_TournamentPrizes] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Tournaments]...';


GO
CREATE TABLE [dbo].[Tournaments] (
    [Id]             INT           NOT NULL,
    [TournamentName] NVARCHAR (50) NULL,
    [TeamId]         INT           NULL,
    CONSTRAINT [PK_Tournaments] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MatchupEntries_ToMatchups1]...';


GO
ALTER TABLE [dbo].[MatchupEntries]
    ADD CONSTRAINT [FK_MatchupEntries_ToMatchups1] FOREIGN KEY ([MatchupId]) REFERENCES [dbo].[Matchups] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_MatchupEntries_ToMatchups2]...';


GO
ALTER TABLE [dbo].[MatchupEntries]
    ADD CONSTRAINT [FK_MatchupEntries_ToMatchups2] FOREIGN KEY ([ParentMatchupId]) REFERENCES [dbo].[Matchups] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TeamMembers_ToTeams]...';


GO
ALTER TABLE [dbo].[TeamMembers]
    ADD CONSTRAINT [FK_TeamMembers_ToTeams] FOREIGN KEY ([TeamId]) REFERENCES [dbo].[Teams] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TeamMembers_ToPlayers]...';


GO
ALTER TABLE [dbo].[TeamMembers]
    ADD CONSTRAINT [FK_TeamMembers_ToPlayers] FOREIGN KEY ([PlayerId]) REFERENCES [dbo].[Players] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentEntries_ToTournament]...';


GO
ALTER TABLE [dbo].[TournamentEntries]
    ADD CONSTRAINT [FK_TournamentEntries_ToTournament] FOREIGN KEY ([TournamentId]) REFERENCES [dbo].[Tournaments] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentEntries_ToTeams]...';


GO
ALTER TABLE [dbo].[TournamentEntries]
    ADD CONSTRAINT [FK_TournamentEntries_ToTeams] FOREIGN KEY ([TeamId]) REFERENCES [dbo].[Teams] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentPrizes_ToTournaments]...';


GO
ALTER TABLE [dbo].[TournamentPrizes]
    ADD CONSTRAINT [FK_TournamentPrizes_ToTournaments] FOREIGN KEY ([TournamentId]) REFERENCES [dbo].[Tournaments] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_TournamentPrizes_ToPrizes]...';


GO
ALTER TABLE [dbo].[TournamentPrizes]
    ADD CONSTRAINT [FK_TournamentPrizes_ToPrizes] FOREIGN KEY ([PrizeId]) REFERENCES [dbo].[Prizes] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Tournaments_ToTeams]...';


GO
ALTER TABLE [dbo].[Tournaments]
    ADD CONSTRAINT [FK_Tournaments_ToTeams] FOREIGN KEY ([TeamId]) REFERENCES [dbo].[Teams] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[spPrizes_Insert]...';


GO
CREATE PROCEDURE [dbo].[spPrizes_Insert]
	@placeNumber int = 0,
	@placeName nvarchar(50),
	@prizeAmount money,
	@prizePercentage float,
	@id int = 0 output
AS
BEGIN
	SET NOCOUNT ON;

	INSERT INTO dbo.Prizes (PlaceNumber, PlaceName, PrizeAmount, PrizePercentage)
	VALUES (@placeNumber, @placeName, @prizeAmount, @prizePercentage);

	SELECT @id = SCOPE_IDENTITY();
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '11913a01-d44d-4c02-8dcc-a2b9355c56e2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('11913a01-d44d-4c02-8dcc-a2b9355c56e2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '37209060-b345-41c5-adef-bd102792947c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('37209060-b345-41c5-adef-bd102792947c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cea92aec-25fc-4a7c-a92b-7a385a0e81f6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cea92aec-25fc-4a7c-a92b-7a385a0e81f6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fbff1107-2301-491b-b96e-be3c9e15cc5c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fbff1107-2301-491b-b96e-be3c9e15cc5c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7c04c75a-b89d-4508-ad7d-6b5456937bb9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7c04c75a-b89d-4508-ad7d-6b5456937bb9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8f67024c-c58a-42c8-a2da-45d74515d1a0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8f67024c-c58a-42c8-a2da-45d74515d1a0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '39c33ea6-4d1a-4b55-95f2-e58e93d46a14')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('39c33ea6-4d1a-4b55-95f2-e58e93d46a14')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4133e014-6a97-4aca-9561-7b4686629a56')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4133e014-6a97-4aca-9561-7b4686629a56')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8f8021fd-514b-42ff-8b4d-3c33db7e7bcc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8f8021fd-514b-42ff-8b4d-3c33db7e7bcc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'efc55cd1-ab7a-45a8-bb61-ae38da7d340f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('efc55cd1-ab7a-45a8-bb61-ae38da7d340f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '689df3e5-08c7-4260-b8c1-40d82874178e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('689df3e5-08c7-4260-b8c1-40d82874178e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '86ce19b0-44e4-43b1-b4c9-145c4d65d8bf')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('86ce19b0-44e4-43b1-b4c9-145c4d65d8bf')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e8a2f502-13d5-45c7-bf43-7ce502d6ca05')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e8a2f502-13d5-45c7-bf43-7ce502d6ca05')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
